#pragma once

#include <set>
using namespace std;

#include "ContextBufDef.h"

/******************************************************************************
上下文缓冲区类
功能：
	实现上下文的分配、释放和清空。
作者：
	佳也 2623168833 jaye8090@qq.com
时间：
	2014-10-29 到 2015-11-27
******************************************************************************/
class CContextBuf
{
public:
	CContextBuf(ContextBuf::PFNPutTip pfnPutTip = NULL, void * pThis = NULL);

	~CContextBuf(void);

	/**************************************************************************
	初始化
	说明：
		此接口是线程安全的
	**************************************************************************/
	void Init(void);

//基本接口
public:
	/**************************************************************************
	分配接受
	说明：
		分配接受上下文
		此接口是线程安全的
	参数：
		pfnAccept		接受回调函数
		pThis			回调this指针
	返回：
		接受上下文
	**************************************************************************/
	ContextBuf::SAcceptContext * AllocAccept(ContextBuf::PFNAccept pfnAccept
		, void * pThis);

	/**************************************************************************
	分配连接
	说明：
		分配连接上下文
		此接口是线程安全的
	参数：
		pfnConn		连接回调函数
		pThis		回调this指针
	返回：
		连接上下文
	**************************************************************************/
	ContextBuf::SConnContext * AllocConn(ContextBuf::PFNConn pfnConn
		, void * pThis);

	/**************************************************************************
	分配接收
	说明：
		分配接收上下文
		此接口是线程安全的
	参数：
		pfnRecv		接收回调函数
		pThis		回调this指针
	返回：
		接收上下文
	**************************************************************************/
	ContextBuf::SRecvContext * AllocRecv(ContextBuf::PFNRecv pfnRecv
		, void * pThis);

	/**************************************************************************
	分配发送
	说明：
		分配发送上下文
		此接口是线程安全的
	参数：
		pData			数据
		uiDataSize		数据大小
	返回：
		发送上下文
	**************************************************************************/
	ContextBuf::SSendContext * AllocSend(void * pData
		, unsigned int uiDataSize);

	/**************************************************************************
	释放
	说明：
		释放上下文
		此接口是线程安全的
	参数：
		pContext		上下文
	**************************************************************************/
	void Free(ContextBuf::SContext * pContext);

	/**************************************************************************
	清空
	说明：
		释放所有分配的上下文
		此接口是线程安全的
	**************************************************************************/
	void Clear(void);

//内部操作
private:
	/**************************************************************************
	释放缓冲区
	参数：
		pContext		上下文
	**************************************************************************/
	void _FreeBuf(ContextBuf::SContext * pContext);

	/**************************************************************************
	输出提示
	参数：
		strTip		提示
		iErr		错误码
		strErr		错误串
	**************************************************************************/
	void _PutTip(string strTip, int iErr = 0, string strErr = "");

//内部数据
private:
	ContextBuf::PFNPutTip		m_pfnPutTip;		//输出提示回调函数
	void						* m_pThis;			//回调this指针

	CCriticalSection		m_csLock;		//互斥锁

	set<ContextBuf::SContext *>		m_setContext;		//上下文表
};