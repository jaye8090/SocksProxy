#pragma once

#include <string>
#include <set>
using namespace std;

#include "ChannelDef.h"

class CSocksProxyDlg;

/******************************************************************************
通道类
功能：
	管理用户到目标的桥接
作者：
	佳也 2623168833 jaye8090@qq.com
时间：
	2016-10-20 到 2016-10-21
******************************************************************************/
class CChannel
{
public:
	CChannel(Channel::PFNPutTip pfnPutTip = NULL, void * pThis = NULL);

	~CChannel(void);

	/**************************************************************************
	初始化
	说明：
		此接口是线程安全的
	参数：
		pMainWnd		主窗口
		usPort			端口
	返回：
		绑定端口成功返回true，否则返回false。
	**************************************************************************/
	bool Init(CSocksProxyDlg * pMainWnd, unsigned short usPort);

//基本接口
public:
	/**************************************************************************
	删除用户连接
	说明：
		此接口是线程安全的
	参数：
		pBridge		桥接
	**************************************************************************/
	void DelUserConn(Channel::SBridge * pBridge);

	/**************************************************************************
	删除目标连接
	说明：
		此接口是线程安全的
	参数：
		pBridge		桥接
	**************************************************************************/
	void DelDstConn(Channel::SBridge * pBrige);

	/**************************************************************************
	获取连接数
	说明：
		获取通道的连接数
		此接口是线程安全的
	返回：
		连接数
	**************************************************************************/
	unsigned int GetConnCnt(void);

	/**************************************************************************
	关闭
	说明：
		关闭套接字，停止监听端口，关闭所有连接，停止线程。
		此接口是线程安全的
	**************************************************************************/
	void Close(void);

	/**************************************************************************
	是否已经关闭
	说明：
		桥接表是否为空，线程是否已经退出。
		此接口是线程安全的
	返回：
		已经关闭返回true，否则返回false。
	**************************************************************************/
	bool IsClose(void);

//内部操作
private:
	/**************************************************************************
	检查活跃线程
	**************************************************************************/
	static UINT _threadCheckAlive(LPVOID pParam);

	/**************************************************************************
	检查活跃
	**************************************************************************/
	void _CheckAlive(void);

	/**************************************************************************
	接受回调函数
	**************************************************************************/
	static void _callbackAccept(SOCKET socket
		, unsigned long ulRemoteIP, void * pThis);

	/**************************************************************************
	关闭所有桥接
	**************************************************************************/
	void _CloseAllBridge(void);

	/**************************************************************************
	处理接受
	参数：
		socket		套接字
	**************************************************************************/
	void _ProcessAccept(SOCKET socket);

	/**************************************************************************
	删除桥接
	参数：
		pBridge		桥接
	**************************************************************************/
	void _DelBridge(Channel::SBridge * pBridge);

	/**************************************************************************
	新建桥接
	参数：
		socket		套接字
	**************************************************************************/
	void _NewBridge(SOCKET socket);

	/**************************************************************************
	输出提示
	参数：
		strTip		提示
		iErr		错误码
		strErr		错误串
	**************************************************************************/
	void _PutTip(string strTip, int iErr = 0, string strErr = "");

//内部数据
private:
	Channel::PFNPutTip		m_pfnPutTip;		//输出提示回调函数
	void					* m_pThis;			//回调this指针

	CSocksProxyDlg		* m_pMainWnd;		//主窗口指针

	CCriticalSection		m_csLock;		//互斥锁

	SOCKET		m_socket;		//套接字

	set<Channel::SBridge *>		m_setBridge;		//桥接表

	CEvent		m_eventStop;		//停止事件
	CEvent		m_eventExit;		//退出事件
};